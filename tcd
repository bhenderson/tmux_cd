#!/bin/bash

name=$1
shift

if [ -z "$name" ]; then
  tmux list-session
  exit
fi

# $name is a valid directory, go to it and start screen
if [ -d "$name" ]; then
  cd $name
  exact_match=true
  name=`basename $PWD`
fi

##
# $ tmux ls
# foo2
# foo1
# foo
# bar
#
# $ tcd foo => exact match, switch to it
# $ tcd fo  => disambiguate
# $ tcd baz => no match, new
# $ tcd ar  => only one mach, switch to it

# set session name to exact match if matching more than two, otherwise, closest match
# set session_name to exact match if only one
# set session_name to closest match if only one
# start new session


set_session_name() {
  names=($(tmux list-session -F "#{session_name}" | grep $name))
  case ${#names[*]} in
    0)
      # no match
      tmux new-session -s $name
      ;;
    1)
      # closest match
      tmux attach-session -t $names
      ;;
    2)
      # disambiguate
      tmux list-session
      ;;
  esac
}

# if switching to directory, force exact match
attach() {
  exact_match && disambiguate >/dev/null && return 1
  tmux attach-session -t $name
}

disambiguate() {
  tmux list-session | grep "$@" $name
}

new() {
  exact_match || disambiguate && return 1
  tmux new-session -s $name "$@"
}

exact_match() {
  tmux list-session | grep --quiet "$name:" && tmux attach-session -t $name
}

# one match, use it
# two matches, error out
close_match() {
  matches=($(tmux list-session -F "#{session_name}" | grep $name))

  case ${#matches[*]} in
    0) # no match
      tmux new-session -s $name "$@"
      ;;
    1) # closest match
      tmux attach-session -t $matches
      ;;
    *)
      # disambiguate
      tmux list-session
      ;;
  esac
}

# if zero matches, attach will fail, and grep will fail, and new will run
# if one match, attach will succeed
# if two matches, attach will fail, and grep will succeed, and new will NOT run.
#attach || new "$@"
exact_match || close_match "$@"
